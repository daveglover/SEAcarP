#Jahn Kallis
#6/19/2015

# Estimate maturity schedule using heirarchical bayesian framework and GSI data
# Code for bayesian analysis adapted from Doll and Lauer (2013) and
# code from bayesian workshop (AEL-Wagner/Midway). See logistic regression r file
# for correlated slopt-intercept components
################################################################################-

# Load libraries and demographics table----
rm(list=ls())
library(R2jags)
library(mcmcplots)
library(FSAdata)
library(FSA)
library(MCMCpack)

dat <- read.csv("T:/Projects/Asian.Carp.Model.v2/Data files/Individual_fish_data/Demographics.csv")
head(dat); dim(dat)

# Prepare data for analysis----
# Subset data
dat <- subset(dat, Species=="BHCP")# | Species=="HYCP") # Select species
dat <- subset(dat, Sex=="F") # Select females
dat$Month <- as.numeric(format(as.Date(dat$Sampdate, format="%Y-%m-%d"), format="%m"))# Select May-August (See fisheries paper)
dat <- subset(dat, Month>4 & Month<9)

# Remove rows with missing length and gonad weight data
dat <- dat[!is.na(dat$TL),]
dat <- dat[!is.na(dat$GonadWT),]

# Estimate GSI
dat$GSI <- NA
dat$GSI <- 100 * (dat$GonadWT / (dat$WT-dat$GonadWT))

# Create a maturity ID column (GSI based)
dat$MaturityGSI=0
dat$MaturityGSI[which(dat$GSI>=1)] = 1

# Center length
xbar <- mean(dat$TL)
denom <- 20
dat$cTL <- dat$TL - xbar
dat$cTL <- dat$cTL/denom
plot(MaturityGSI ~ cTL, data=dat, col=PoolID)

# Set poolID from 0,1,2,...max
dat$PoolID <-as.numeric(factor(dat$Pool))

# Cross tabulation table
tst = table(dat$Pool, dat$Year)
tst = rbind(tst, tst[1,])
tst = cbind(tst, tst[,1])
rownames(tst)[11] = "TOTAL"
colnames(tst)[9] = "TOTAL"
tst

# Bayesian model (jags) - Random site effect----
####################################################################-

# Define the model in the BUGS language and write a text file
sink("model.txt")
cat("
    model {
    # Likelihood: 
    # Level-1 of the model
    for (i in 1:N){ 
    #y[i] ~ dbin(p[i],1)   # distributional assumption
    y[i] ~ dbern(p[i])   # distributional assumption
    p[i] <- exp(lp[i])/(1+exp(lp[i])) # logit link function
    lp[i] <- alpha[group[i]] + beta[group[i]] * x[i]	# linear predictor    
    } 
    
    # Level-2 of the model
    for(j in 1:J){
    alpha[j] <- BB[j,1]
    beta[j] <- BB[j,2]
    
    BB[j,1:K] ~ dmnorm(BB.hat[j,], Tau.B[,]) # bivriate normal
    
    BB.hat[j,1] <- mu.alpha
    BB.hat[j,2] <- mu.beta
    }
    
    mu.alpha ~ dnorm(0, 0.0001)
    mu.beta ~ dnorm(0, 0.0001)
    
    ### Model variance-covariance
    Tau.B[1:K,1:K] ~ dwish(W[,], df)
    df <- K+1
    Sigma.B[1:K,1:K] <- inverse(Tau.B[,])
    for (k in 1:K){
    for (k.prime in 1:K){
    rho.B[k,k.prime] <- Sigma.B[k,k.prime]/
    sqrt(Sigma.B[k,k]*Sigma.B[k.prime,k.prime])
    }
    sigma.B[k] <- sqrt(Sigma.B[k,k])
    }
    
    } # end model
    ",fill = TRUE)
sink()

# Specifiy jags arguments----
J <- length(unique(dat$PoolID))
N <- nrow(dat)
x <- dat$cTL
y <- dat$MaturityGSI
group <- dat$PoolID

# Number of varying parameters
K <- 2

# Create identity matrix for Wishart dist'n
#!!!!!!!Number of parameters to estimate (K)
W <- diag(K)

# Load data
data <- list(N = N, x = x, y = y, group = group, J = J,K=K,W=W )

# Initial values
inits <- function (){
  list (mu.alpha = rnorm(1), mu.beta=rnorm(1), 
        BB=matrix(rnorm(J*K),nrow=J,ncol=K),Tau.B=rwish(K+1,diag(K)) )
}

# Parameters monitored
parameters <- c("mu.alpha","mu.beta","BB", "Sigma.B")

# MCMC settings
ni <- 500000
nt <- 3
nb <- 200000
nc <- 3

out2 <- jags(data, inits, parameters, "model.txt", n.chains = nc, 
             n.thin = nt, n.iter = ni, n.burnin = nb)

# Summarize posteriors
print(out2, dig = 3)

# Save the posterior distribution----
mcmc.list.out <- as.mcmc(out2) #Convert out1 (rjags object) into an object of class mcmc.list
mcmc.out <- data.frame(as.matrix(mcmc.list.out, chains=F)) # Convert object of class mcmc.list to class matrix then dataframe

# Back-transform population slope and intercept
mcmc.out$rawintercept<-mcmc.out$mu.beta * (-1*xbar/denom) + mcmc.out$mu.alpha # intercept: plug in mean(TL)/20
mcmc.out$rawslope<-mcmc.out$mu.beta/denom # slope must be backtransformed b/c TL was more than just centered (i.e., division by 20)
save <- subset(mcmc.out, select=c("rawintercept", "rawslope"))

quantile(save$rawintercept,  probs = c(0.05, 0.5, 0.95))
quantile(save$rawslope,  probs = c(0.05, 0.5, 0.95))
mean(save$rawintercept); sd(save$rawintercept)
mean(save$rawslope); sd(save$rawslope)


#Write posterior to file
write.csv(save, 
  file="T:/Projects/Asian.Carp.Model.v2/Maturity/BHCP/POSTERIOR_distribution.csv",
  row.names=F)

#Write plotting data to file
write.csv(dat, 
          file="T:/Projects/Asian.Carp.Model.v2/Maturity/BHCP/Plot_data.csv",
          row.names=F)







